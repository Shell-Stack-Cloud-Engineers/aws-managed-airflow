import { Construct } from "constructs";
import { Stack, StackProps } from "aws-cdk-lib";
import { AirflowStack } from "./nested-stacks/airflow-stack";
import { NetworkingStack } from "./nested-stacks/networking-stack";
import { AppConfigStack } from "./nested-stacks/app-config-stack";
import { SharedResourcesStack } from "./nested-stacks/shared-resources-stack";
import { BucketDeployment, Source } from "aws-cdk-lib/aws-s3-deployment";
import { join } from "path";
import { EmrStack } from "./nested-stacks/emr-stack";

export class InfraStack extends Stack {
  constructor(scope: Construct, id: string, props?: StackProps) {
    super(scope, id, props);

    /**
     * Networking stack deploying VPC and Subnets.
     */
    const { vpc } = new NetworkingStack(this, "NetworkingStack", {
      ...props,
      deployBastionHost: false,
    });

    /**
     * Shared resources
     */
    const { bigDataBucket } = new SharedResourcesStack(
      this,
      "SharedResourcesStack",
      {
        ...props,
      }
    );

    /**
     * Populate the S3 bucket with the Airflow DAGs and requirements.txt
     */
    const relativePathToDags = join(__dirname, "..", "..", "airflow", "src");
    new BucketDeployment(this, "DeployAirflowDags", {
      sources: [Source.asset(relativePathToDags)],
      destinationBucket: bigDataBucket,
    });

    /**
     * Managed Workflows for Apache Airflow
     */
    new AirflowStack(this, "AirflowStack", {
      ...props,
      airflowBucket: bigDataBucket,
      airflowName: "BigDataAirflow",
      vpc,
    });

    const {emrServiceRole, ec2EmrInstanceProfile} = new EmrStack(this, "EmrStack", { vpc });

    /**
     * Application Config: Stores values generated by the CDK in AWS Application Config, for you business logic to use. I.e. access the auto generated resource names
     */
    new AppConfigStack(this, "AirflowAppConfigStack", {
      name: "airflow-app-config",
      configContent: {
        airflowS3BucketName: bigDataBucket.bucketName,
        emrServiceRoleName: emrServiceRole.roleName,
        ec2EmrInstanceProfileName: ec2EmrInstanceProfile.instanceProfileName,
      },
    });
  }
}
